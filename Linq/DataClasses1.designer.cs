#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertsongs(songs instance);
    partial void Updatesongs(songs instance);
    partial void Deletesongs(songs instance);
    partial void Insertartists(artists instance);
    partial void Updateartists(artists instance);
    partial void Deleteartists(artists instance);
    partial void Insertsong_artists(song_artists instance);
    partial void Updatesong_artists(song_artists instance);
    partial void Deletesong_artists(song_artists instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Linq.Properties.Settings.Default.DataSourceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<songs> songs
		{
			get
			{
				return this.GetTable<songs>();
			}
		}
		
		public System.Data.Linq.Table<artists> artists
		{
			get
			{
				return this.GetTable<artists>();
			}
		}
		
		public System.Data.Linq.Table<song_artists> song_artists
		{
			get
			{
				return this.GetTable<song_artists>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.songs")]
	public partial class songs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _title;
		
		private System.Nullable<int> _rating;
		
		private int _size;
		
		private int _time;
		
		private System.Nullable<System.DateTime> _date_of_song_addendum_to_the_database;
		
		private EntitySet<song_artists> _song_artists;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnratingChanging(System.Nullable<int> value);
    partial void OnratingChanged();
    partial void OnsizeChanging(int value);
    partial void OnsizeChanged();
    partial void OntimeChanging(int value);
    partial void OntimeChanged();
    partial void Ondate_of_song_addendum_to_the_databaseChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_of_song_addendum_to_the_databaseChanged();
    #endregion
		
		public songs()
		{
			this._song_artists = new EntitySet<song_artists>(new Action<song_artists>(this.attach_song_artists), new Action<song_artists>(this.detach_song_artists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int")]
		public System.Nullable<int> rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Int NOT NULL")]
		public int size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Int NOT NULL")]
		public int time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[date of song addendum to the database]", Storage="_date_of_song_addendum_to_the_database", DbType="Date")]
		public System.Nullable<System.DateTime> date_of_song_addendum_to_the_database
		{
			get
			{
				return this._date_of_song_addendum_to_the_database;
			}
			set
			{
				if ((this._date_of_song_addendum_to_the_database != value))
				{
					this.Ondate_of_song_addendum_to_the_databaseChanging(value);
					this.SendPropertyChanging();
					this._date_of_song_addendum_to_the_database = value;
					this.SendPropertyChanged("date_of_song_addendum_to_the_database");
					this.Ondate_of_song_addendum_to_the_databaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="songs_song_artists", Storage="_song_artists", ThisKey="Id", OtherKey="song_id")]
		public EntitySet<song_artists> song_artists
		{
			get
			{
				return this._song_artists;
			}
			set
			{
				this._song_artists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_song_artists(song_artists entity)
		{
			this.SendPropertyChanging();
			entity.songs = this;
		}
		
		private void detach_song_artists(song_artists entity)
		{
			this.SendPropertyChanging();
			entity.songs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.artists")]
	public partial class artists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _author;
		
		private EntitySet<song_artists> _song_artists;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    #endregion
		
		public artists()
		{
			this._song_artists = new EntitySet<song_artists>(new Action<song_artists>(this.attach_song_artists), new Action<song_artists>(this.detach_song_artists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="artists_song_artists", Storage="_song_artists", ThisKey="Id", OtherKey="artist_id")]
		public EntitySet<song_artists> song_artists
		{
			get
			{
				return this._song_artists;
			}
			set
			{
				this._song_artists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_song_artists(song_artists entity)
		{
			this.SendPropertyChanging();
			entity.artists = this;
		}
		
		private void detach_song_artists(song_artists entity)
		{
			this.SendPropertyChanging();
			entity.artists = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.song_artists")]
	public partial class song_artists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _song_id;
		
		private int _artist_id;
		
		private EntityRef<artists> _artists;
		
		private EntityRef<songs> _songs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onsong_idChanging(int value);
    partial void Onsong_idChanged();
    partial void Onartist_idChanging(int value);
    partial void Onartist_idChanged();
    #endregion
		
		public song_artists()
		{
			this._artists = default(EntityRef<artists>);
			this._songs = default(EntityRef<songs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_song_id", DbType="Int NOT NULL")]
		public int song_id
		{
			get
			{
				return this._song_id;
			}
			set
			{
				if ((this._song_id != value))
				{
					if (this._songs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsong_idChanging(value);
					this.SendPropertyChanging();
					this._song_id = value;
					this.SendPropertyChanged("song_id");
					this.Onsong_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artist_id", DbType="Int NOT NULL")]
		public int artist_id
		{
			get
			{
				return this._artist_id;
			}
			set
			{
				if ((this._artist_id != value))
				{
					if (this._artists.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onartist_idChanging(value);
					this.SendPropertyChanging();
					this._artist_id = value;
					this.SendPropertyChanged("artist_id");
					this.Onartist_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="artists_song_artists", Storage="_artists", ThisKey="artist_id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public artists artists
		{
			get
			{
				return this._artists.Entity;
			}
			set
			{
				artists previousValue = this._artists.Entity;
				if (((previousValue != value) 
							|| (this._artists.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._artists.Entity = null;
						previousValue.song_artists.Remove(this);
					}
					this._artists.Entity = value;
					if ((value != null))
					{
						value.song_artists.Add(this);
						this._artist_id = value.Id;
					}
					else
					{
						this._artist_id = default(int);
					}
					this.SendPropertyChanged("artists");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="songs_song_artists", Storage="_songs", ThisKey="song_id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public songs songs
		{
			get
			{
				return this._songs.Entity;
			}
			set
			{
				songs previousValue = this._songs.Entity;
				if (((previousValue != value) 
							|| (this._songs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._songs.Entity = null;
						previousValue.song_artists.Remove(this);
					}
					this._songs.Entity = value;
					if ((value != null))
					{
						value.song_artists.Add(this);
						this._song_id = value.Id;
					}
					else
					{
						this._song_id = default(int);
					}
					this.SendPropertyChanged("songs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
